{"version":3,"sources":["components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["myColors","NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","moved","console","log","react_default","a","createElement","className","getNavClasses","style","backgroundColor","position","top","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","classes","onTop","Component","App","isTop","_this2","document","addEventListener","window","scrollY","onScroll","setState","Fragment","navbar","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAKIA,aAAoB,WA2ETC,cAnEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KALRQ,MAAQ,CACNC,OAAO,GAMPC,QAAQC,IAAIV,EAAKD,OAHAC,wEAOjB,OACEW,EAAAC,EAAAC,cAAA,OACEC,UAAWX,KAAKY,gBAChBC,MAAO,CAAEC,gBAAiBpB,EAAgBqB,SAAU,QAASC,IAAK,IAElER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeM,KAAK,KAAjC,sBAGAT,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVO,KAAK,SACLC,cAAY,WACZC,cAAY,iBACZC,gBAAc,gBACdC,gBAAc,QACdC,aAAW,qBAEXf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAGlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2Ba,GAAG,iBAC3ChB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uCACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWM,KAAK,KAA7B,cAIFT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uCACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWM,KAAK,KAA7B,aAIFT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uCACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWM,KAAK,KAA7B,iBAIFT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uCACZH,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVM,KAAK,sFAFP,kDAcV,IAAIQ,EAAU,iCAId,OAHAnB,QAAQC,IAAIP,KAAKJ,OACjB6B,IACuB,IAArBzB,KAAKJ,MAAM8B,MAAiB,eAAiB,6BAnE9BC,aCiCNC,oNApCbxB,MAAQ,CACNyB,OAAO,sFAGW,IAAAC,EAAA9B,KAClB+B,SAASC,iBAAiB,SAAU,WAClC,IAAMH,EAAQI,OAAOC,QAAU,IAC3BL,IAAUC,EAAK1B,MAAMyB,OACvBC,EAAKK,SAASN,sCAKXA,GACP7B,KAAKoC,SAAS,CAAEP,2CAIhB,OACErB,EAAAC,EAAAC,cAACF,EAAAC,EAAM4B,SAAP,KACE7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAQZ,MAAO1B,KAAKI,MAAMyB,QAE1BrB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,6LAGuD,eA5BjDiB,cCQEY,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASd,SAASe,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9c6ed2b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\n\nvar myColors = { White: \"#FFFFFF\", Purple: \"#8A2BE2\" };\n\n// stateless functional component\nclass NavBar extends Component {\n  state = {\n    moved: true\n  };\n\n  constructor(props) {\n    super(props);\n\n    console.log(this.props);\n  }\n\n  render() {\n    return (\n      <nav\n        className={this.getNavClasses()}\n        style={{ backgroundColor: myColors.White, position: \"fixed\", top: 0 }}\n      >\n        <a className=\"navbar-brand\" href=\"#\">\n          Aidan James Draper\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarToggler\"\n          aria-controls=\"navbarToggler\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarToggler\">\n          <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0 \">\n            <li className=\"nav-item d-flex justify-content-end\">\n              <a className=\"nav-link\" href=\"#\">\n                Portfolio\n              </a>\n            </li>\n            <li className=\"nav-item d-flex justify-content-end\">\n              <a className=\"nav-link\" href=\"#\">\n                Projects\n              </a>\n            </li>\n            <li className=\"nav-item d-flex justify-content-end\">\n              <a className=\"nav-link\" href=\"#\">\n                Publications\n              </a>\n            </li>\n            <li className=\"nav-item d-flex justify-content-end\">\n              <a\n                className=\"nav-link\"\n                href=\"https://drive.google.com/file/d/1IQ16fE8xMedcYRaPZknN0keYl16-v7yM/view?usp=sharing\"\n              >\n                CV\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n\n  getNavClasses() {\n    let classes = \"mynav navbar navbar-expand-md \";\n    console.log(this.props);\n    classes +=\n      this.props.onTop === true ? \"navbar-light\" : \"navbar-dark bg-dark\";\n    return classes;\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    isTop: true\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"scroll\", () => {\n      const isTop = window.scrollY < 100;\n      if (isTop !== this.state.isTop) {\n        this.onScroll(isTop);\n      }\n    });\n  }\n\n  onScroll(isTop) {\n    this.setState({ isTop });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar onTop={this.state.isTop} />\n\n        <main className=\"container\">\n          <div className=\"top-container\">\n            <p>\n              Hi, my name is Aidan! I am a senior studying Computer Science and\n              Statistics at Elon University in North Carolina. I plan on\n              graduating this May and pursuing a Ph.D. afterwards.{\" \"}\n            </p>\n          </div>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}